
//用类型来作为推断的依据，是traits的精髓--即参数推导，
//优点就是在编译阶段就可以根据形参类型来做某些的判断
struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};


template <class Category,
         class T,
         class Distance = ptrdiff_t,
         class Pointer = T*,
         class Reference = T&>
struct iterator
{
    typedef Category    iterator_category;
    typedef T           value_type;
    typedef Distance    difference_type;
    typedef Pointer     pointer;
    typedef Reference   reference;
};

//traits
//泛化版本
template <class I>
struct iterator_traits
{
    typedef typename I::iterator_category   iterator_category;
    //指迭代器的所指对象的型别
    typedef typename I::value_type          value_type;
    //表示两个迭代器之间的距离
    typedef typename I::difference_type     difference_type;
    //代表迭代器所指的对象的地址，左值
    typedef typename I::pointer             pointer;
    //以引用传回左值
    typedef typename I::reference           reference;
};
#include <cstddef>
//针对原生指针(pointer)设计的 偏特化版本
template <class I>
struct iterator_traits<I*>
{
    typedef random_access_iterator_tag   iterator_category;
    //指迭代器的所指对象的型别
    typedef I                      value_type;
    //表示两个迭代器之间的距离
    typedef ptrdiff_t              difference_type;
    //代表迭代器所指的对象的地址，左值
    typedef I*                     pointer;
    //以引用传回左值
    typedef I&                     reference;
};
//针对原生常指针(pointer to const)设计的 偏特化版本
template <class I>
struct iterator_traits<const I*>
{
    typedef random_access_iterator_tag   iterator_category;
    //指迭代器的所指对象的型别
    typedef I                      value_type;
    //表示两个迭代器之间的距离
    typedef ptrdiff_t              difference_type;
    //代表迭代器所指的对象的地址，左值
    typedef const I*               pointer;
    //以引用传回左值
    typedef const I&               reference;
};

//返回迭代器类型category
template <class Iterator>
inline typename iterator_traits<Iterator>::iterator_category
iterator_category(const Iterator&)
{
    typedef typename iterator_traits<Iterator>::iterator_category category;
    return category(); //生成该类的对象
}

//返回迭代器的distance_type
template <class Iterator>
inline typename iterator_traits<Iterator>::difference_type*
distance_type(const Iterator&)
{
    //static_cast允许执行任意的隐式转换和相反转换动作。（即使它是不允许隐式的）
    //应用到类的指针上，意思是说它允许子类类型的指针转换为父类类型的指针（这是
    //一个有效的隐式转换），同时，也能够执行相反动作：转换父类为它的子类。
    //Base *a    = new Base;
    //Derived *b = static_cast<Derived *>(a);
    return static_cast<typename iterator_traits<Iterator>::difference_type*>(0);
}

//返回迭代器的value_type
template <class Iterator>
inline typename iterator_traits<Iterator>::value_type*
value_type(const Iterator&)
{
    return static_cast<typename iterator_traits<Iterator>::value_type*>(0);
}

//因为迭代器内距离和改变位置的函数，用到了++,--所以迭代器最最起码要根据
//具体的数据结构重写操作符++,--
//若是随机存储的还得重写-
//distance函数
template <class InputIterator>
inline typename iterator_traits<InputIterator>::difference_type
__distance(InputIterator first,
           InputIterator last,
           input_iterator_tag)
{
    typename iterator_traits<InputIterator>::difference_type n = 0;
    while (first != last )
    {
        ++first;
        ++n;
    }
    return n;
}

template <class RandomAccessIterator>
inline typename iterator_traits<RandomAccessIterator>::difference_type
__distance(RandomAccessIterator first,
           RandomAccessIterator last,
           random_access_iterator_tag)
{
    return last - first;
}

template <class InputIterator>
inline typename iterator_traits<InputIterator>::difference_type
distance(InputIterator first,
         InputIterator last,
         input_iterator_tag)
{
    //typedef typename iterator_traits<InputIterator>::iterator_category category;
    //return __distance(first, last, category());
    return __distance(first, last, iterator_category(InputIterator()));//实际麻烦了
}

// advance 函数
template <class InputIterator, class Distance>
inline void
__advance(InputIterator& i, Distance n,
          input_iterator_tag)
{
    while (n--) ++i;
}

template <class BidirectionalIterator, class Distance>
inline void
__advance(BidirectionalIterator& i, Distance n,
          bidirectional_iterator_tag)
{
    if ( n > 0 ) while ( n-- ) ++i;
    else while ( n++ ) --i;
}

template <class RandomAccessIterator, class Distance>
inline void
__advance(RandomAccessIterator& i, Distance n,
          random_access_iterator_tag)
{
    i += n;
}

template <class InputIterator, class Distance>
inline void
advance(InputIterator& i, Distance n)
{
    __advance(i, n, iterator_category(i));
}

