template <class T1, class T2>
void construct(T1 *p, const T2& value)
{
    new (p) T1(value);
}

template <class T>
void destroy(T* pointer)
{
    pointer->~T();//调用析构函数
}

template <class T, class Alloc>
class simple_alloc
{
public:
    static T* allocate(size_t n)
    {
        return 0 == n ? 0 : (T*) Alloc::allocate(n*sizeof(T));
    }
    static T* allocate()
    {
        return (T*) Alloc::allocate(sizeof(T),0);
    }
    static void deallocate(T* p, size_t n)
    {
        if (0!=n) Alloc::deallocate(p, n * sizeof(T));
    }
    static void deallocate(T* p)
    {
        Alloc::deallocate(p, sizeof(T));
    }
};
