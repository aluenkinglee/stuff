#ifndef HASH_SET_H
#define HASH_SET_H

#include "hashtable"

template <class Value,
          class HashFcn = hash<Value>,
          class EqualKey = equal_to<Value>,
          class Alloc = std::allocator<Value> >
class hash_set
{
private:
    typedef hashtable<Value, Value, HashFcn, identity<Value>,EqualKey, Alloc > ht;
    ht rep;
public:
    typedef typename ht::key_type   key_type;
    typedef typename ht::value_type value_type;
    typedef typename ht::hasher     hasher;
    typedef typename ht::key_equal  key_equal;
    typedef typename ht::size_type  size_type;
    typedef typename ht::pointer    pointer;
    typedef typename ht::const_pointer  const_pointer;
    typedef typename ht::reference  reference;
    typedef typename ht::const_reference    const_reference;
    typedef typename ht::iterator   iterator;

    hasher hash_funct() const {return rep.hash_funct();}
    key_equal key_eq()  const {return rep.key_eq();}

public:
    hash_set():rep(100,hasher(),key_equal()){}
    explicit hash_set(size_type n) : rep(n, hasher(), key_equal()) {}
    hash_set(size_type n, const hasher& hf) : rep(n, hf, key_equal()) {}
    hash_set(size_type n, const hasher& hf, const key_equal& eq) : rep(n, hf, eq) {}

    template <class InputIterator>
    hash_set(InputIterator first, InputIterator last)
    : rep(100, hasher(), key_equal()) {
        rep.insert_unique(first, last);
    }
    template <class InputIterator>
    hash_set(InputIterator first, InputIterator last, size_type n)
    : rep(n, hasher(), key_equal()) {
        rep.insert_unique(first, last);
    }
    template <class InputIterator>
    hash_set(InputIterator first, InputIterator last, size_type n, const hasher& hf)
    : rep(n, hf, key_equal()) {
        rep.insert_unique(first, last);
    }
    template <class InputIterator>
    hash_set(InputIterator first, InputIterator last, size_type n,
             const hasher& hf, const key_equal& eq)
    : rep(n, hf, eq) {
        rep.insert_unique(first, last);
    }

public:
    size_type size() const {return rep.size();}
    //size_type max_size() const {return rep.max_size();}
    bool empty() const { return rep.empty(); }
    void swap (hash_set& hs) { rep.swap(hs.rep); }
    friend bool operator== (const hash_set& hs1, const hash_set& hs2) {
        return hs1.rep == hs2.rep;
    }

    iterator begin() const { return rep.begin(); }
    iterator end() const { return rep.end(); }

public:
    std::pair<iterator, bool> insert(const value_type& obj)
    {
        std::pair<typename ht::iterator, bool > p = rep.insert_unique(obj);
        return std::pair<iterator,bool>(p.first, p.second);
    }
    template <class InputIterator>
    void
    insert(InputIterator first, InputIterator last) {
        rep.insert_unique(first, last);
    }
    std::pair<iterator, bool> insert_noresize(const value_type& obj)
    {
        std::pair<typename ht::iterator, bool > p = rep.insert_unique_noresize(obj);
        return std::pair<iterator,bool>(p.first, p.second);
    }

//?iterator find(const key_type& key)  const {
 //       return rep.find(key);
 //   }
    iterator find(const key_type& key)  {
        return rep.find(key);
    }
    size_type count(const key_type& key) const { return rep.count(key); }

    std::pair<iterator, iterator> equal_range(const key_type& key) const {
        return rep.equal_range(key);
    }

    size_type erase(const key_type& key) { return rep.erase(key); }
    void erase(iterator it) { rep.erase(); }
    void erase(iterator first, iterator last) { rep.erase(first, last); }
    void clear() { rep.clear(); }

public:
    void resize(size_type hint) {rep.resize(hint);}
    size_type bucket_count() const { return rep.bucket_count(); }
    size_type max_bucket_count() const { return rep.max_bucket_count(); }
    size_type elems_in_bucket(size_type n ) const { return rep.elems_in_bucket(n); }

};
#endif
